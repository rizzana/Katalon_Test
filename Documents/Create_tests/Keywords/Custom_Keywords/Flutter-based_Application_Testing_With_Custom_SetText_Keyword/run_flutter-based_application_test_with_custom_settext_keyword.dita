<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="id_2" class="- topic/topic concept/concept "><title class="- topic/title ">Run Flutter-based application test with custom SetText
         keyword</title><conbody class="- topic/body  concept/conbody "><ol class="- topic/ol "><li class="- topic/li ">

          <p class="- topic/p ">In Katalon Studio, open your project and create a new test case.
               Record your mobile testing script. Use <xref href="../../Keywords_Description_In_Katalon_Studio/Mobile-Keywords/mobile-tap/mobile-tap.dita" class="- topic/xref ">Tap
                  keyword</xref> on elements <b class="+ topic/ph hi-d/b ">EditText - Email</b> and
               <b class="+ topic/ph hi-d/b ">EditText - Password</b>, then click
               <b class="+ topic/ph hi-d/b ">Save</b>.</p>
        </li><li class="- topic/li ">
          <p class="- topic/p ">In the <b class="+ topic/ph hi-d/b ">Tests Explorer</b> section on the left side
               of Katalon Studio, navigate to the <b class="+ topic/ph hi-d/b ">Keywords</b> folder
               and create a new keyword package. Name the package
               <b class="+ topic/ph hi-d/b ">com.kms.katalon.core.mobile.keyword.builtin</b>.</p>
          <p class="- topic/p ">
            <image href="https://github.com/katalon-studio/docs-images/raw/master/katalon-studio/tutorials/flutter-based-application-testing/create%20package.png" scope="external" width="700" class="- topic/image "><alt class="- topic/alt ">create package</alt></image>
          </p>
        </li><li class="- topic/li ">
          <p class="- topic/p ">

            Right click on the
               <b class="+ topic/ph hi-d/b ">com.kms.katalon.core.mobile.keyword.builtin</b>
               package and create a new keyword named
               <b class="+ topic/ph hi-d/b ">SetTextKeyword</b>. See also: <xref href="../Introduction_To_Custom_Keywords/introduction-to-custom-keywords.dita" class="- topic/xref ">Introduction
                  to Custom Keywords</xref>.
            <image href="https://github.com/katalon-studio/docs-images/raw/master/katalon-studio/tutorials/flutter-based-application-testing/create%20keyword.png" scope="external" width="600" class="- topic/image "><alt class="- topic/alt ">create Class name</alt></image>
            In the <b class="+ topic/ph hi-d/b ">SetTextKeyword.groovy</b> file, copy and
               paste the following script and save it.
            <b class="+ topic/ph hi-d/b ">SetTextKeyword.groovy script</b>:
            
              <codeblock class="+ topic/pre pr-d/codeblock ">package com.kms.katalon.core.mobile.keyword.builtin

import java.text.MessageFormat

import org.openqa.selenium.InvalidElementStateException
import org.openqa.selenium.Keys
import org.openqa.selenium.WebElement
import org.openqa.selenium.interactions.KeyInput
import org.openqa.selenium.interactions.Sequence;

import com.kms.katalon.core.annotation.internal.Action
import com.kms.katalon.core.configuration.RunConfiguration
import com.kms.katalon.core.exception.StepFailedException
import com.kms.katalon.core.helper.KeywordHelper
import com.kms.katalon.core.keyword.internal.SupportLevel
import com.kms.katalon.core.mobile.constants.StringConstants
import com.kms.katalon.core.mobile.keyword.internal.MobileAbstractKeyword
import com.kms.katalon.core.mobile.keyword.internal.MobileDriverFactory
import com.kms.katalon.core.mobile.keyword.internal.MobileKeywordMain
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.testobject.TestObject
import com.kms.katalon.selenium.util.SeleniumKeysUtil;

import groovy.transform.CompileStatic
import io.appium.java_client.AppiumDriver

@Action(value = "setText")
public class SetTextKeyword extends MobileAbstractKeyword {

    @CompileStatic
    @Override
    public SupportLevel getSupportLevel(Object ...params) {
        return super.getSupportLevel(params)
    }

    @CompileStatic
    @Override
    public Object execute(Object ...params) {
        TestObject to = getTestObject(params[0])
        String text = (String) params[1]
        int timeout = (int) params[2]
        FailureHandling flowControl = (FailureHandling)(params.length &gt; 3 &amp;&amp; params[3] instanceof FailureHandling ? params[3] : RunConfiguration.getDefaultFailureHandling())
        setText(to,text,timeout,flowControl)
    }

    @CompileStatic
    public void setText(TestObject to, String text, int timeout, FailureHandling flowControl) throws StepFailedException {
        MobileKeywordMain.runKeyword({
            KeywordHelper.checkTestObjectParameter(to)
            timeout = KeywordHelper.checkTimeout(timeout)
            WebElement element = findElement(to, timeout * 1000)
            if (element == null) {
                MobileKeywordMain.stepFailed(MessageFormat.format(StringConstants.KW_MSG_OBJ_NOT_FOUND, to.getObjectId()), flowControl, null, true)
                return
            }
            element.clear()
            try {
                element.sendKeys(text.toString())
            } catch (InvalidElementStateException e) {
                AppiumDriver driver = MobileDriverFactory.getDriver()
                element.click()
                KeyInput keyboard = new KeyInput("keyboard");
                Sequence sendKeys = new Sequence(keyboard, 0);

                for (int i = 0; i &lt; text.length(); i++) {
                    String c = text.charAt(i).toString()

                    sendKeys.addAction(keyboard.createKeyDown(c.codePointAt(0)));
                }

                driver.perform(Arrays.asList(sendKeys));
            }
            String readableText = SeleniumKeysUtil.getReadableText(text)
            logger.logPassed(MessageFormat.format(StringConstants.KW_LOG_PASSED_TEXT_HAS_BEEN_SET_TO_ELEMENT, [
                readableText,
                to.getObjectId()] as Object[]))
        }, flowControl, true, to != null ? MessageFormat.format(StringConstants.KW_MSG_FAILED_TO_SET_ELEMENT_TEXT, to.getObjectId()) : StringConstants.KW_MSG_FAILED_TO_SET_ELEMENT_TEXT)
    }
}
</codeblock>
            
          </p>
          <p class="- topic/p ">
            <image href="https://github.com/katalon-studio/docs-images/raw/master/katalon-studio/tutorials/flutter-based-application-testing/KS-flutter-based-application-testing-folder.png" scope="external" width="700" class="- topic/image "><alt class="- topic/alt ">create custom keyword</alt></image>
          </p>
        </li><li class="- topic/li ">
          <p class="- topic/p ">In the toolbar, select <b class="+ topic/ph hi-d/b ">Window &gt; Reset
                  Perspective...</b>
          </p>
        </li><li class="- topic/li ">

          <p class="- topic/p ">Create a Test Case and switch to <b class="+ topic/ph hi-d/b ">Script</b> mode.
               Enter <b class="+ topic/ph hi-d/b ">Mobile.setText</b>, then select
               <codeph class="+ topic/ph pr-d/codeph ">setText(TestObject to, String text, int timeout, FailureHandling flowcontrol)</codeph>. See also: <xref href="../../Keywords_Description_In_Katalon_Studio/Mobile-Keywords/mobile-set-text/mobile-set-text.dita" class="- topic/xref ">[Mobile]
                  Set Text</xref>.</p>
          <p class="- topic/p ">
            <image href="https://github.com/katalon-studio/docs-images/raw/master/katalon-studio/tutorials/flutter-based-application-testing/KS-flutter-setText.png" scope="external" width="700" class="- topic/image "><alt class="- topic/alt ">settext option</alt></image>
          </p>
        </li><li class="- topic/li ">
          <p class="- topic/p ">Run your Test Case and see if it passes successfully.</p>
        </li></ol></conbody></concept>