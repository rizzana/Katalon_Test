<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="task-9154" class="- topic/topic task/task "><title class="- topic/title ">Validate GraphQL request and response against schemas</title><taskbody class="- topic/body task/taskbody "><context class="- topic/section task/context ">To validate a GraphQL request body and the response returns against schemas, do as follows:</context><steps class="- topic/ol task/steps "><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Create a GraphQL web service request object.</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">In the web service request object editor, switch to the <uicontrol class="+ topic/ph ui-d/uicontrol ">Verification</uicontrol> tab.</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">In the <uicontrol class="+ topic/ph ui-d/uicontrol ">Verification</uicontrol> snippets, use the <codeph class="+ topic/ph pr-d/codeph ">WS.validateGraphQLBodyAgainstSchema</codeph> with the request body and a schema. See <xref href="../../../Keywords/Keywords_Description_In_Katalon_Studio/Web-Service-Keywords/ws-validate-graphql-request-against-schema/WS_Validate_GraphQL_request_body_against_a_GraphQL_schema.dita" class="- topic/xref ">[WS] Validate GraphQL request body against a GraphQL schema</xref>.</cmd><info class="- topic/itemgroup task/info ">The response returns as the JSON format, so you can also add the <codeph class="+ topic/ph pr-d/codeph ">WS.validateJsonAgainstSchema</codeph> to validate the response. See <xref href="../../../Keywords/Keywords_Description_In_Katalon_Studio/Web-Service-Keywords/ws-validate-json-schema/validate_the_request_response_with_a_json_schema.dita" class="- topic/xref ">[WS] Validate the response against a JSON schema</xref>.</info><info class="- topic/itemgroup task/info ">For example:<codeblock class="+ topic/pre pr-d/codeblock ">import static org.assertj.core.api.Assertions.*

import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.testobject.RequestObject
import com.kms.katalon.core.testobject.ResponseObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webservice.verification.WSResponseManager

import groovy.json.JsonSlurper
import internal.GlobalVariable as GlobalVariable

RequestObject request = WSResponseManager.getInstance().getCurrentRequest()

ResponseObject response = WSResponseManager.getInstance().getCurrentResponse()

WS.validateGraphQLBodyAgainstSchema(request, "Schema/Country.qls", FailureHandling.CONTINUE_ON_FAILURE)

WS.validateJsonAgainstSchema(response, "Schema/JSON/CountrySchema.json", FailureHandling.STOP_ON_FAILURE)</codeblock></info></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Save and click <uicontrol class="+ topic/ph ui-d/uicontrol ">Test Request and Verify</uicontrol>.</cmd></step></steps><result class="- topic/section task/result ">You can view the validation result in the <uicontrol class="+ topic/ph ui-d/uicontrol ">Response</uicontrol> section.<image href="ks-840-verification-tab.png" class="- topic/image "><alt class="- topic/alt ">response tab</alt></image><p class="- topic/p ">You can also validate the GraphQL request/ response against schemas in a test case and view the validation result in the <uicontrol class="+ topic/ph ui-d/uicontrol ">Log Viewer</uicontrol>. For example:</p><p class="- topic/p "><image href="ks-840-validation.png" class="- topic/image "/><image href="ks-840-validate-graphql-schema.png" class="- topic/image "/></p> <p class="- topic/p ">Sample script:<codeblock class="+ topic/pre pr-d/codeblock ">import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.RequestObject
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys

RequestObject req = findTestObject('Country/CountryQuerySchema');
if (WS.validateGraphQLBodyAgainstSchema(req, "Schema/Country.qls")) {
	res = WS.sendRequest(findTestObject('Country/CountryQuerySchema'))
	WS.validateAgainstJsonSchema(res, "Schema/JSON/CountrySchema.json")
}</codeblock></p></result></taskbody></task>