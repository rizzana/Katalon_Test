<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="id_1" class="- topic/topic concept/concept "><title class="- topic/title ">Authorization OAuth 2.0 in <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/></title><conbody class="- topic/body  concept/conbody "><p class="- topic/p ">OAuth 2.0 (Open Authorization 2.0), is an industry-standard protocol for authorization.</p><p class="- topic/p ">This guide illustrates how to use OAuth 2.0 in <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/>.</p><p class="- topic/p ">Grants in OAuth 2.0 are sets of steps a client has to perform to get resource access authorization. The following grant types are supported in Katalon Studio: <ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p "><uicontrol class="+ topic/ph ui-d/uicontrol ">Authorization Code</uicontrol>: used by confidential and public clients to exchange an authorization code for an access token. After the user returns to the client via the redirect URL, the application gets the authorization code from the URL and use it to request an access token. </p></li><li class="- topic/li "><p class="- topic/p "><uicontrol class="+ topic/ph ui-d/uicontrol ">Password Credentials</uicontrol>: used to exchange credentials of a user for an access token. Password credentials is the simplest OAuth grants and involves only one step: the application presents a traditional username and password login. Because the client application has to collect the password of a user and send it to the authorization server, password credentials is not recommended grant type. </p></li><li class="- topic/li "><p class="- topic/p "><uicontrol class="+ topic/ph ui-d/uicontrol ">Client Credentials</uicontrol>: used by clients to obtain an access token outside of the context of a user. </p></li><li class="- topic/li "><p class="- topic/p "><uicontrol class="+ topic/ph ui-d/uicontrol ">Refresh Token</uicontrol>: used by clients to exchange a refresh token for an access token when the access token has expired. Refresh token allows clients to continue to have a valid access token without further interaction with the user.</p></li></ul>To learn more about OAuth 2.0 grant types, see OAuth 2.0 documentation: <xref href="https://oauth.net/2/grant-types/" scope="external" class="- topic/xref ">OAuth Grant Types</xref>.</p><p class="- topic/p ">Here is the list of available field of OAuth 2.0 authorization in Katalon Studio:<ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p "><uicontrol class="+ topic/ph ui-d/uicontrol ">Callback URL</uicontrol>: The client application callback URL to redirect to after OAuth authorization.</p></li><li class="- topic/li "><p class="- topic/p "><uicontrol class="+ topic/ph ui-d/uicontrol ">Auth URL</uicontrol>: The endpoint for the API provider authorization server, which is used to retrieve the authorization code.</p></li><li class="- topic/li "><p class="- topic/p "><uicontrol class="+ topic/ph ui-d/uicontrol ">Access Token URL</uicontrol>: The authentication server of the provider, which is used to exchange an authorization code for an access token.</p></li><li class="- topic/li "><p class="- topic/p "><uicontrol class="+ topic/ph ui-d/uicontrol ">State</uicontrol>: An opaque value to prevent cross-site request forgery.</p></li><li class="- topic/li "><p class="- topic/p "><uicontrol class="+ topic/ph ui-d/uicontrol ">Consumer Key</uicontrol>: The API key associated with the application (Twitter, Facebook, etc.). This key (or client ID, as Facebook calls it) is what identifies the client, which is a website/service that is trying to access the resources of an end-user.</p></li><li class="- topic/li "><p class="- topic/p "><uicontrol class="+ topic/ph ui-d/uicontrol ">Consumer Secret</uicontrol>: The password of the client that is used to authenticate with the authentication server, which is a Twitter/Facebook/etc. server that authenticates the client.</p></li><li class="- topic/li "><p class="- topic/p "><uicontrol class="+ topic/ph ui-d/uicontrol ">Authorization code</uicontrol>: A token represents the access granted by the end user, which is used to obtain an access token and a refresh token.</p></li><li class="- topic/li "><p class="- topic/p "><uicontrol class="+ topic/ph ui-d/uicontrol ">Scope</uicontrol>: The scope of request access, which might include multiple space-separated values. This is a mechanism in OAuth 2.0 to limit application access to an account of a user.</p></li><li class="- topic/li "><p class="- topic/p "><uicontrol class="+ topic/ph ui-d/uicontrol ">Access Token</uicontrol>: A string that the OAuth client uses to make requests to the resource server.</p></li><li class="- topic/li "><p class="- topic/p "><uicontrol class="+ topic/ph ui-d/uicontrol ">Refresh Token</uicontrol>: A string that the OAuth client can use to get a new access token without the interaction of the user.</p></li></ul></p></conbody></concept>