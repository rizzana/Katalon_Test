<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept-5738" xml:lang="en-us" class="- topic/topic concept/concept "><title class="- topic/title ">Set up a Harness Application</title><prolog class="- topic/prolog "><author translate="no" type="creator" class="- topic/author ">Hao Le &lt;hao.le@katalon.com&gt;</author><metadata class="- topic/metadata "><keywords class="- topic/keywords "/></metadata></prolog><conbody class="- topic/body  concept/conbody "><p class="- topic/p ">A Harness Application represents a group of microservices, their deployment pipelines, and all the building blocks for those pipelines. Harness represents your microservice using a logical group of one or more entities: Services, Environments, Workflows, Pipelines, Triggers, and Infrastructure Provisioners.</p><p class="- topic/p ">Here we set up an Application with the necessary configurations to create Workflow for our pipeline.</p></conbody><task id="a671q74rzwbdkce" class="- topic/topic task/task "><title class="- topic/title ">Add a Harness Application</title><taskbody class="- topic/body task/taskbody "><steps class="- topic/ol task/steps "><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">To add a Harness Application, you can refer to this Harness document: <xref href="https://docs.harness.io/article/bucothemly-application-configuration#step_1_set_up_the_application" scope="external" class="- topic/xref ">Set up Harness Application</xref>.</cmd></step></steps></taskbody><task id="crny6uo2dd9x3uh" class="- topic/topic task/task "><title class="- topic/title ">Add a Service to the Application</title><taskbody class="- topic/body task/taskbody "><context class="- topic/section task/context "><p class="- topic/p ">Services represent your microservices/apps. You define where the artifacts for those microservices come from, and the container specs, configuration variables, and files for those microservices.</p><p class="- topic/p ">Here we add a Service and configure it with the defined Artifact Server and manifest files.</p><p class="- topic/p ">Follow these steps:</p></context><steps class="- topic/ol task/steps "><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">In your Application, click <uicontrol class="+ topic/ph ui-d/uicontrol ">Service</uicontrol> &gt; <uicontrol class="+ topic/ph ui-d/uicontrol ">Add Service</uicontrol>.</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">In the opened <uicontrol class="+ topic/ph ui-d/uicontrol ">Add Service</uicontrol> dialog, specify the name and deployment type.</cmd><stepxmp class="- topic/itemgroup task/stepxmp ">As we use a Kubernetes Cloud Provider, we specify the Kubernetes Deployment Type. <image width="500" href="Images/Harness-add-a-service.png" class="- topic/image "><alt class="- topic/alt ">Add Service dialog</alt></image></stepxmp></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Click <uicontrol class="+ topic/ph ui-d/uicontrol ">Submit</uicontrol>.</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Add an Artifact Source. In the <uicontrol class="+ topic/ph ui-d/uicontrol ">Service Overview</uicontrol> section of the new Service, click <uicontrol class="+ topic/ph ui-d/uicontrol ">Add Artifact Source</uicontrol> &gt; <uicontrol class="+ topic/ph ui-d/uicontrol ">Docker Registry</uicontrol>. </cmd><stepxmp class="- topic/itemgroup task/stepxmp "><p class="- topic/p ">Here we specify the Artifact Source with our Docker Registry Artifact Server and the name of the Katalon Docker image (<codeph class="+ topic/ph pr-d/codeph ">katalonstudio/katalon</codeph>).</p><p class="- topic/p "><image width="500" href="Images/harness-service-add-artifact-source.png" class="- topic/image "><alt class="- topic/alt ">Artifact Source - Docker Registry dialog</alt></image></p></stepxmp></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Link manifest files to the Service. In the <uicontrol class="+ topic/ph ui-d/uicontrol ">Manifests</uicontrol> section of the Service, click on the <i class="+ topic/ph hi-d/i ">option</i> icon (top-right corner) and select <uicontrol class="+ topic/ph ui-d/uicontrol ">Link Remote Manifests</uicontrol>.</cmd><stepxmp class="- topic/itemgroup task/stepxmp "><p class="- topic/p ">Here we specify the Source Repository with our GitHub Source Repo Provider and the branch, folder path that contains the manifest files (<codeph class="+ topic/ph pr-d/codeph ">.harness</codeph>).</p><image width="500" href="Images/harness-link-remote-manifests.png" class="- topic/image "><alt class="- topic/alt ">Remote Manifests dialog</alt></image></stepxmp></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Defined a variable for Katalon API Key. In the <uicontrol class="+ topic/ph ui-d/uicontrol ">Configuration</uicontrol> / <uicontrol class="+ topic/ph ui-d/uicontrol ">Config Variables</uicontrol>, click <uicontrol class="+ topic/ph ui-d/uicontrol ">Add Variable</uicontrol> and define a variable representing the Katalon API Key.</cmd><stepxmp class="- topic/itemgroup task/stepxmp "><p class="- topic/p ">In the sample manifest files, we create a variable named <codeph class="+ topic/ph pr-d/codeph ">apiKey</codeph> to represent the Katalon API Key. Therefore, in the Service we need to define the variable and provide the value (our Katalon API Key).<image width="500" href="Images/harness-manifest-values-file.png" class="- topic/image "><alt class="- topic/alt ">Sample manifest files with apiKey variable</alt></image></p><p class="- topic/p "><image alt="Config Variable dialog" width="500" href="Images/harness-config-variable-blurred.png" class="- topic/image "><alt class="- topic/alt ">Config Variable dialog</alt></image></p><p class="- topic/p ">To get your Katalon API Key, see: <xref href="../../../Administer/Security_Settings/ka-api-key/generate_a_katalon_api_key.dita" class="- topic/xref "/></p></stepxmp></step></steps><result class="- topic/section task/result "><p class="- topic/p ">The Service is then configured with an Artifact Source, Kubernetes manifests stored in our GitHub repository, and a variable representing the Katalon API Key.</p><p class="- topic/p "><image width="700" href="Images/harness-service-configured-blurred.png" class="- topic/image "><alt class="- topic/alt ">Harness Service configured</alt></image></p></result></taskbody><task id="dk2bxcgu652lz2e" class="- topic/topic task/task "><title class="- topic/title ">Add an Environment to the Application </title><taskbody class="- topic/body task/taskbody "><context class="- topic/section task/context "><p class="- topic/p ">You define your target deployment infrastructure using a Harness Environment. Environments represent your deployment infrastructures, such as Dev, QA, Stage, Production, etc.</p><p class="- topic/p ">In our case, we add an Environment that uses the Kubernetes Cloud Provider.</p><p class="- topic/p ">Follow these steps:</p></context><steps class="- topic/ol task/steps "><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">In your Application, click <uicontrol class="+ topic/ph ui-d/uicontrol ">Environments</uicontrol> &gt; <uicontrol class="+ topic/ph ui-d/uicontrol ">Add Environment</uicontrol> and create a new Environment.</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">In the created Environment, click <uicontrol class="+ topic/ph ui-d/uicontrol ">Add Infrastructure Definition</uicontrol> and specify the properties for your infrastructure.</cmd><stepxmp class="- topic/itemgroup task/stepxmp "><p class="- topic/p ">As we want to execute our tests in a Kubernetes cluster, which is defined in the Kubernetes Cloud Provider, we specify the Infrastructure as follows.</p><p class="- topic/p "><image width="600" href="Images/harness-infrastructure-definition.png" class="- topic/image "><alt class="- topic/alt ">Harness Infrastructure Definition</alt></image></p></stepxmp></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Click <uicontrol class="+ topic/ph ui-d/uicontrol ">Submit</uicontrol>.</cmd></step></steps></taskbody></task></task></task></concept>