<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="id_2" class="- topic/topic concept/concept "><title class="- topic/title ">Variable binding for Test Data with option <i class="+ topic/ph hi-d/i ">bind to test
            case as string</i> disabled</title><conbody class="- topic/body  concept/conbody "><ul class="- topic/ul "><li class="- topic/li ">
          <p class="- topic/p ">Create a Sample Test Data with option <i class="+ topic/ph hi-d/i ">bind to test case as
                  string</i> disabled.</p>
          <p class="- topic/p ">
            <image href="https://github.com/katalon-studio/docs-images/raw/master/katalon-studio/docs/bind-as-string/option-disabled.png" scope="external" class="- topic/image "/>
          </p>
        </li><li class="- topic/li ">
          <p class="- topic/p ">Repeat the same steps as above, and then we have the result as
               below:</p>
          <p class="- topic/p ">
            <image href="https://github.com/katalon-studio/docs-images/raw/master/katalon-studio/docs/bind-as-string/4-passed.png" scope="external" class="- topic/image "/>
          </p>
          <p class="- topic/p ">The test suite should pass because <i class="+ topic/ph hi-d/i ">bind to test case as
                  string</i> is disabled. Test data values are read as-is, and all
               keyword functions receive their expected data types.</p>
        </li></ul><note type="tip" class="- topic/note ">
        
        <ul class="- topic/ul "><li class="- topic/li ">To push customizability further, <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/>  supports an
               annotation called <codeph class="+ topic/ph pr-d/codeph ">BeforeTestDataBindToTestCase</codeph> which
               allows the annotated functions to operate on Test Data variables
               before they are bound to test cases.</li><li class="- topic/li ">Before Katalon 6.3.0, you would have to compile another set of
               Test Data for each requirement. Increasingly varied requirements
               would then further complicate Test Data management.</li><li class="- topic/li ">Starting from version 6.3.0, you need one raw Test Data file and
               then define the rules of transformation in different functions
               using the new annotation. With this feature, deciding how Test Data
               variables are used occurs at run-time.</li></ul>
      </note></conbody></concept>