<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="id_2" class="- topic/topic concept/concept "><title class="- topic/title ">Get Ready!</title><conbody class="- topic/body  concept/conbody "><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Step 1: Set up a project</b>
      </p><p class="- topic/p ">In Katalon Platform, you can create a new project from scratch on Katalon TestOps and open it in Katalon Studio, or
         clone a sample project from our GitHub repository: <xref format="html" href="https://github.com/katalon-studio-samples" scope="external" class="- topic/xref ">Sample
            projects</xref>. </p><p class="- topic/p ">To learn how to open a project in Katalon Studio, see: <xref href="../../../Manage_Projects/Manage_Test_Project/Manage_Test_Project_Overview/Manage_test_project.dita" class="- topic/xref "/>.</p><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Step 2: Create the first test case</b>
      </p><p class="- topic/p ">On the main toolbar, click on <uicontrol class="+ topic/ph ui-d/uicontrol ">Create a new Test Case</uicontrol> or right-click on <uicontrol class="+ topic/ph ui-d/uicontrol ">Test Cases</uicontrol> &gt; <uicontrol class="+ topic/ph ui-d/uicontrol ">New</uicontrol> &gt; <uicontrol class="+ topic/ph ui-d/uicontrol ">Test Case</uicontrol>.</p><p class="- topic/p ">Test cases in <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/> can be written in pure Selenium
         format:</p><codeblock class="+ topic/pre pr-d/codeblock ">WebDriver driver = new ChromeDriver();
String baseUrl = "https://www.katalon.com/";
driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
driver.get("https://katalon-demo-cura.herokuapp.com");
driver.findElement(By.id("btn-make-appointment")).click();
driver.findElement(By.id("txt-username")).clear();
driver.findElement(By.id("txt-username")).sendKeys("John Doe");
driver.findElement(By.id("txt-password")).clear();
driver.findElement(By.id("txt-password")).sendKeys("ThisIsNotAPassword");
driver.findElement(By.id("btn-login")).click();
driver.quit();
</codeblock><p class="- topic/p ">Click <uicontrol class="+ topic/ph ui-d/uicontrol ">Run</uicontrol> to see how it works.</p><p class="- topic/p ">However, writing test cases, especially in high volume at
         once, can be time-consuming. The above test case, if written in <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/> standard format, would look like this:</p><codeblock class="+ topic/pre pr-d/codeblock ">WebUI.openBrowser('https://katalon-demo-cura.herokuapp.com/')
WebUI.click(findTestObject('Page_CURA Healthcare Service/a_Make Appointment'))
WebUI.setText(findTestObject('Page_CURA Healthcare Service/input_Username_username'), 'John Doe')
WebUI.setEncryptedText(findTestObject('Page_CURA Healthcare Service/input_Password_password'), 'g3/DOGG74jC3Flrr3yH+3D/yKbOqqUNM')
WebUI.click(findTestObject('Page_CURA Healthcare Service/button_Login'))
</codeblock><p class="- topic/p ">Click <uicontrol class="+ topic/ph ui-d/uicontrol ">Run</uicontrol> to see how it works.</p><p class="- topic/p ">The <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/> beginning steps seem relatively
         self-explanatory. However, you might wonder where the
         “ChromeDriver” is, what the “click” and
         “findTestObject” methods are, or how to use the
         “Page<i class="+ topic/ph hi-d/i ">CURA Healthcare Service/a</i>Make
         Appointment” argument. Let’s go through them
         together.</p><p class="- topic/p ">Browser drivers such as ChromeDriver in <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/> are abstracted away from the code and set up at the
         execution time to make code inherently cross-browser-able.</p><p class="- topic/p ">“Click” and “setText” are <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/> <xref format="html" href="https://github.com/katalon-studio/katalon-studio-testing-framework" scope="external" class="- topic/xref ">open-source
            built-in keywords</xref> that wrap and enhance the limited set of
         Selenium keywords. You can also define your own set of <xref href="../../../Keywords/Custom_Keywords/Introduction_To_Custom_Keywords/introduction-to-custom-keywords.dita" class="- topic/xref ">custom
            keywords</xref> or import the shared custom keywords made by other
         <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/> users.</p><p class="- topic/p ">“Page<i class="+ topic/ph hi-d/i ">CURA Healthcare Service/a</i>Make
         Appointment” is a <xref href="../../../Test_Objects/Web_Test_Objects/manage-web-test-object/manage-web-test-object.dita" class="- topic/xref ">test
            object</xref> in <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/> which is designed to follow the Page
         Object Model pattern. It helps centralize the application elements
         for easier scripting and maintenance. On top of that, <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/> has  developed Self-healing - a
         feature that makes test objects sustainable, despite the continuous
         changing nature of the AUT. Ultimately, the above script and
         objects can be quickly generated by the <xref href="../../../Record_And_Spy/WebUI_Record_And_Spy_Utilities/record-web-utility/record-web-utility.dita" class="- topic/xref ">Recording</xref> and <xref href="../../../Record_And_Spy/WebUI_Record_And_Spy_Utilities/spy-web-utility/spy-web-utility.dita" class="- topic/xref ">Spying</xref>
         features.</p><p class="- topic/p ">You can also use <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/> to perform both manual testing.
         The tool uniquely provides a dual-script interface for both manual
         and automated tests:</p><p class="- topic/p ">
        
      <image href="image/ks-850-manual.png" class="- topic/image "/><image href="image/ks-850-script.png" class="- topic/image "/></p><p class="- topic/p ">To put into practice, here's how a team of testers and
         developers can apply these steps to a complete workflow: The
         automation experts prepare all the scripting work such as custom
         keywords, <xref href="../../../Create_Test_Cases/Test_Fixtures_And_Test_Listeners/Test_Fixtures_and_Test_Listeners_Test_Hooks.dita" class="- topic/xref ">test
            listeners</xref>, <xref href="../../../Create_Test_Cases/Call_Test_Case_In_Katalon_Studio/Call_test_case_in_manual_view.dita" class="- topic/xref ">calling
            test cases</xref>, etc. Then, the manual QAs - who are not
         familiar with scripting - can utilize all of the prepared
         materials to build test cases. Eventually, the manual QAs can
         gradually learn how to script and become automation scripters.</p><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Step 3: Verification in the test case</b>
      </p><p class="- topic/p ">Next, let’s add verification script to the test case to
         know whether the login process is successful or not.</p><p class="- topic/p ">From the first test case, we have known the basic of how <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/> script works. Now let’s move further to create a more
         realistic test case with the “Make Appointment” header
         verification.</p><p class="- topic/p "><ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/> provides a rich set of verification keywords to
         easily deal with that requirement. Once again, this kind of script
         can be done in both manual or script mode.</p><p class="- topic/p ">
        
      <image width="600" href="image/ks-850-verify-element-text.png" class="- topic/image "/></p><codeblock class="+ topic/pre pr-d/codeblock ">WebUI.verifyElementText(findTestObject('Object Repository/Page_CURA Healthcare Service/h2_Make Appointment'), 'Make Appointment', FailureHandling.STOP_ON_FAILURE)
</codeblock><p class="- topic/p ">After that, the execution results can be checked in the <xref href="../../../../Analyze/Reports/View_Test_Reports/View_test_reports_in_Studio/working-with-execution-log-in-Studio/working-with-execution-log-in-Studio.dita" class="- topic/xref ">Log
            Viewer</xref>. To learn how to view execution logs, see  <xref href="../../../../Analyze/Reports/View_Test_Reports/View_test_reports_in_Studio/working-with-execution-log-in-Studio/working-with-execution-log-in-Studio.dita" class="- topic/xref "/>.</p><p class="- topic/p ">
        
      <image href="image/ks-850-pass.png" class="- topic/image "/></p><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Step 4: Debugging the test case</b>
      </p><p class="- topic/p ">Let’s intentionally make the test case fail by changing
         the verification text to “Make another Appointment.” In
         <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/>, there are several ways to check for the failure
         reasons.</p><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Option 1: Investigate error logs</b>
      </p><p class="- topic/p ">
        
      <image href="image/ks-850-fail-test.png" class="- topic/image "/></p><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Option 2: Debug mode</b>
      </p><p class="- topic/p ">To investigate complex scenarios, <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/> provides a
         debug mechanism which works the same as the code debug mechanism in
         advanced developer IDE.</p><p class="- topic/p ">
        
      <image href="image/ks-850-debug.png" class="- topic/image "/></p><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Option 3: Manual debug</b>
      </p><p class="- topic/p ">The <uicontrol class="+ topic/ph ui-d/uicontrol ">Record</uicontrol> feature of <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/> has its
         own method to debug as well. You can continue to record the failed
         test case, run the error test step, then investigate and fix the
         issue directly in the recording mode. See the examples below:</p><p class="- topic/p ">
        
      <image width="500" href="image/ks-850-confirmation.png" class="- topic/image "/></p><p class="- topic/p ">
        
      <image width="700" href="image/ks-850-run-from-here.png" class="- topic/image "/></p><p class="- topic/p ">
        
      <image href="image/ks-850-recorder-log.png" class="- topic/image "/></p><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Step 5: Plan the test case in a test suite</b>
      </p><p class="- topic/p ">Right-click on <uicontrol class="+ topic/ph ui-d/uicontrol ">Test Suites</uicontrol> &gt; <uicontrol class="+ topic/ph ui-d/uicontrol ">New</uicontrol> &gt; <uicontrol class="+ topic/ph ui-d/uicontrol ">Test Suite</uicontrol>.</p><p class="- topic/p "><xref href="../../../../Organize/Manage_Tests/Test_suite/manage-test-cases-in-test-suite-ks/intro_manage_in_test_suites_in_Studio.dita" class="- topic/xref ">A
            test suite</xref> is used to plan test cases with several
         configurations such as: retrying on failure, email sending or
         data-driven binding. You can manage additional configurations for
         test suite execution by expanding the <b class="+ topic/ph hi-d/b ">Execution
            Information</b> section, as below:</p><p class="- topic/p "><image href="image/ks-850-test-suite.png" class="- topic/image "/></p><p class="- topic/p ">For more details, visit <xref href="../../../../Organize/Manage_Tests/Test_suite/manage-test-cases-in-test-suite-ks/intro_manage_in_test_suites_in_Studio.dita" class="- topic/xref "/>.</p><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Step 6: Execute the test suite and view the
            result</b>
      </p><p class="- topic/p ">Select the <uicontrol class="+ topic/ph ui-d/uicontrol ">Test Suite</uicontrol> and click <uicontrol class="+ topic/ph ui-d/uicontrol ">Run</uicontrol>.</p><p class="- topic/p ">The final step is executing the test cases in the designed test
         suite. Here is how to execute a test case: Once planned, the test
         suites or test suite collections can be executed not only directly
         in <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/>, but also by <xref href="../../../../Execute/Katalon_Runtime_Engine/console-mode-execution/console-mode-execution_1.dita" class="- topic/xref ">command
            line</xref>. Together with the standard JUnit format of the execution
         results and <xref format="html" href="https://github.com/katalon-studio/docker-images" scope="external" class="- topic/xref ">pre-built
            Docker images</xref>, these features will give you full flexibility to
         integrate Katalon Studio into a CI/CD pipeline with tools such as
         Jenkins or CircleCI.</p><p class="- topic/p ">
        
      <image href="image/ks-850-test-case-table.png" class="- topic/image "/></p></conbody></concept>