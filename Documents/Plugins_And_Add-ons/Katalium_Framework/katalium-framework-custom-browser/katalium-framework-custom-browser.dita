<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="id" class="- topic/topic concept/concept "><title class="- topic/title ">Configure Browsers in Katalium Framework</title><conbody class="- topic/body  concept/conbody "><p class="- topic/p ">Katalium Framework provides four default browser configurations:
         <codeph class="+ topic/ph pr-d/codeph ">chrome</codeph>, <codeph class="+ topic/ph pr-d/codeph ">firefox</codeph>,
         <codeph class="+ topic/ph pr-d/codeph ">internet_explorer</codeph>, <codeph class="+ topic/ph pr-d/codeph ">edge</codeph>.</p><p class="- topic/p ">You can specify the default browser in the file
         <codeph class="+ topic/ph pr-d/codeph ">kata-default.properties</codeph> (<xref format="html" href="https://github.com/katalon-studio/katalium-sample/blob/master/src/test/resources/kata-default.properties" scope="external" class="- topic/xref ">sample</xref>).
         It can also be overridden using the parameter
         <codeph class="+ topic/ph pr-d/codeph ">kataBrowser</codeph>, e.g. <codeph class="+ topic/ph pr-d/codeph ">mvn clean test
            -DkataBrowser=firefox</codeph>.</p><p class="- topic/p ">Here is a simple definition of two test suites that run
         parallelly on Chrome and Firefox (<xref format="html" href="https://github.com/katalon-studio/katalium-sample/blob/master/src/test/resources/testng-parallel.xml" scope="external" class="- topic/xref ">source
            code</xref>):</p><codeblock class="+ topic/pre pr-d/codeblock ">&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;
&lt;!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" &gt;

&lt;suite name="Suite1" verbose="1" parallel="tests" thread-count="2" &gt;
    &lt;test name="simple" &gt;
        &lt;parameter name="kataScreenshot" value="true" /&gt;
        &lt;parameter name="kataBrowser" value="firefox" /&gt;
        &lt;classes&gt;
            &lt;class name="com.katalon.kata.sample.simple.MakeAppointmentTest" /&gt;
        &lt;/classes&gt;
    &lt;/test&gt;
    &lt;test name="parameterize" &gt;
        &lt;parameter name="kataScreenshot" value="true" /&gt;
        &lt;parameter name="kataBrowser" value="chrome" /&gt;
        &lt;parameter name="facility" value="Hongkong CURA Healthcare Center" /&gt;
        &lt;parameter name="visitDate" value="27/12/2016" /&gt;
        &lt;parameter name="comment" value="Please make appointment as soon as possible." /&gt;
        &lt;classes&gt;
            &lt;class name="com.katalon.kata.sample.parameterize.ParameterizedMakeAppointmentTest" /&gt;
        &lt;/classes&gt;
    &lt;/test&gt;
&lt;/suite&gt;
</codeblock><p class="- topic/p ">Custom browsers can be provided by implementing the interface
         <codeph class="+ topic/ph pr-d/codeph ">com.katalon.kata.webdriver.WebDriverFactory</codeph>. The
         following example is a factory that creates a Sauce Labs WebDriver
         instance (<xref format="html" href="https://github.com/katalon-studio/katalium-sample/blob/master/src/test/java/com/katalon/kata/sample/custombrowser/SampleSauceLabsWebDriverFactory.java" scope="external" class="- topic/xref ">source
            code</xref>):</p><codeblock class="+ topic/pre pr-d/codeblock ">package com.katalon.kata.sample.custombrowser;

import com.katalon.kata.helper.ExceptionHelper;
import com.katalon.kata.helper.ParameterHelper;
import com.katalon.kata.webdriver.WebDriverFactory;
import org.apache.commons.lang3.StringUtils;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;

import java.net.URL;

public class SampleSauceLabsWebDriverFactory implements WebDriverFactory {

    private static final String BROWSER_KEY = "sauceBrowser";

    private static final String VERSION_KEY = "sauceBrowserVersion";

    private static final String PLATFORM_KEY = "saucePlatform";

    private static final String SAUCE_USER_NAME_KEY = "sauceUsername";

    private static final String SAUCE_ACCESS_KEY_KEY = "sauceAccessKey";

    private static final String SAUCE_URL = "https://ondemand.saucelabs.com/wd/hub";

    @Override
    public RemoteWebDriver createRemoteWebDriver(String seleniumServer) {

        try {

            String sauceUserName = ParameterHelper.getParameterDefaultValue(SAUCE_USER_NAME_KEY);
            String sauceAccessKey = ParameterHelper.getParameterDefaultValue(SAUCE_ACCESS_KEY_KEY);

            String browser = ParameterHelper.getParameterDefaultValue(BROWSER_KEY);
            String version = ParameterHelper.getParameterDefaultValue(VERSION_KEY);
            String os = ParameterHelper.getParameterDefaultValue(PLATFORM_KEY);

            if (StringUtils.isBlank(browser)) {
                browser = "chrome";
            }
            if (StringUtils.isBlank(version)) {
                version = "latest";
            }
            if (StringUtils.isBlank(os)) {
                os = "Windows 10";
            }

            DesiredCapabilities capabilities = new DesiredCapabilities();
            capabilities.setCapability("username", sauceUserName);
            capabilities.setCapability("accessKey", sauceAccessKey);
            capabilities.setCapability(CapabilityType.BROWSER_NAME, browser);
            capabilities.setCapability(CapabilityType.VERSION, version);
            capabilities.setCapability(CapabilityType.PLATFORM, os);

            RemoteWebDriver driver = new RemoteWebDriver(new URL(SAUCE_URL), capabilities);
            return driver;

        } catch (Exception e) {
            return ExceptionHelper.rethrow(e);
        }
    }
}
</codeblock><p class="- topic/p ">Browser factories need to be registed with the
         <codeph class="+ topic/ph pr-d/codeph ">WebDriverPool</codeph>, e.g. (<xref format="html" href="https://github.com/katalon-studio/katalium-sample/blob/master/src/test/java/com/katalon/kata/sample/custombrowser/RegisterCustomBrowsersListener.java" scope="external" class="- topic/xref ">source
            code</xref>):</p><codeblock class="+ topic/pre pr-d/codeblock ">package com.katalon.kata.sample.custombrowser;

import com.katalon.kata.webdriver.WebDriverPool;
import org.testng.IExecutionListener;

public class RegisterCustomBrowsersListener implements IExecutionListener {

    private static final String SAUCE_LABS_BROWSER = "saucelabs";

    @Override
    public void onExecutionStart() {
        WebDriverPool webDriverPool = WebDriverPool.get();
        webDriverPool.setFactory(SAUCE_LABS_BROWSER, new SampleSauceLabsWebDriverFactory());
    }

    @Override
    public void onExecutionFinish() {

    }
}
</codeblock></conbody></concept>