<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept-5782" xml:lang="en-us" class="- topic/topic concept/concept "><title class="- topic/title ">Allow editing JVM parameters in Execution Settings</title><prolog class="- topic/prolog "><author translate="no" type="creator" class="- topic/author ">Yen Nguyen &lt;yen.nguyen@katalon.com&gt;</author><metadata class="- topic/metadata "><keywords class="- topic/keywords "/></metadata></prolog><conbody class="- topic/body  concept/conbody "><p class="- topic/p "><note type="important" class="- topic/note "><ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p "><ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/> version 7.2.5 onwards </p></li><li class="- topic/li ">An active <ph conkeyref="name-variables/kse" class="- topic/ph "/> license. To learn more about types of licenses, you can refer to this document: <xref href="../../../../Administer/KSE-KRE-Licenses/license_overview/c_intro_license_overview.dita" class="- topic/xref ">Types of licenses.</xref> </li></ul></note></p><p class="- topic/p ">You can edit VM arguments in the execution settings by going to <uicontrol conkeyref="ks-UI-text/ks-ui-project" class="+ topic/ph ui-d/uicontrol "/> &gt; <uicontrol conkeyref="ks-UI-text/ks-ui-settings" class="+ topic/ph ui-d/uicontrol "/> &gt; <uicontrol conkeyref="ks-UI-text/ks-ui-execution" class="+ topic/ph ui-d/uicontrol "/> &gt; <uicontrol conkeyref="ks-UI-text/ks-ui-launch-arguments" class="+ topic/ph ui-d/uicontrol "/>.</p><p class="- topic/p "><image width="600" href="image/ks-855-launch-arguments.png" class="- topic/image "/></p><p class="- topic/p ">In the <uicontrol conkeyref="ks-UI-text/ks-ui-vm-arguments" class="+ topic/ph ui-d/uicontrol "/> tab, enter your arguments. VM Arguments entered in the executions settings of a project change the behavior of a Java process of each execution. For example:</p><p class="- topic/p "><image width="600" href="image/ks-855-launch-arg-example.png" class="- topic/image "/></p><p class="- topic/p ">To make sure if the configuration works, add this simple test case:</p><p class="- topic/p "><codeblock class="+ topic/pre pr-d/codeblock ">import com.kms.katalon.core.util.KeywordUtil
KeywordUtil.logInfo(System.getProperty("testme")) </codeblock><image width="700" href="image/ks-855-vm-example-tc.png" class="- topic/image "/></p><p class="- topic/p ">Currently, <ph conkeyref="name-variables/katalon-studio" class="- topic/ph "/> does not support VM arguments values containing space. Below is a list of the most used JVM Parameters:</p><p class="- topic/p ">Specify minimal and maximal heap sizes:<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">-Xms&lt;heap size&gt;[unit]</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">-Xmx&lt;heap size&gt;[unit]</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">-XX:MaxMetaspaceSize=&lt;metaspace size&gt;[unit]</codeph></li></ul></p><p class="- topic/p ">Garbage collection implementation types: <ul class="- topic/ul "><li class="- topic/li ">Serial Garbage Collector:&#160;<codeph class="+ topic/ph pr-d/codeph ">-XX:+UseSerialGC</codeph></li><li class="- topic/li ">Parallel Garbage Collector:&#160;<codeph class="+ topic/ph pr-d/codeph ">-XX:+UseParallelGC</codeph></li><li class="- topic/li ">CMS Garbage Collector:&#160;<codeph class="+ topic/ph pr-d/codeph ">-XX:+USeParNewGC</codeph></li><li class="- topic/li ">G1 Garbage Collector:&#160;<codeph class="+ topic/ph pr-d/codeph ">-XX:+UseG1GC</codeph></li></ul></p><p class="- topic/p ">Garbage collection logging: <ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">Specify the log file rolling policy:&#160;<codeph class="+ topic/ph pr-d/codeph ">-XX:+UseGCLogFileRotation</codeph></p></li><li class="- topic/li "><p class="- topic/p ">Denote the max number of log files that can be written for a single application life cycle:&#160;<codeph class="+ topic/ph pr-d/codeph ">-XX:NumberOfGCLogFiles=&lt; number of log files &gt;</codeph></p></li><li class="- topic/li "><p class="- topic/p ">Specify the max size of the file:&#160;<codeph class="+ topic/ph pr-d/codeph ">-XX:GCLogFileSize=&lt; file size &gt;[ unit ]</codeph></p></li><li class="- topic/li "><p class="- topic/p ">Denote the file's location:&#160;<codeph class="+ topic/ph pr-d/codeph ">-Xloggc:/path/to/gc.log</codeph></p></li></ul></p><p class="- topic/p ">Handling out of memory:<ul class="- topic/ul "><li class="- topic/li ">Dump heap into physical file in case of OutOfMemoryError:&#160;<codeph class="+ topic/ph pr-d/codeph ">-XX:+HeapDumpOnOutOfMemoryError</codeph></li><li class="- topic/li ">Denote the path where the file is to be written:&#160;<codeph class="+ topic/ph pr-d/codeph ">-XX:HeapDumpPath=./java_pid&lt;pid&gt;.hprof</codeph></li><li class="- topic/li "><p class="- topic/p ">Issue emergency commands to be executed in case of out of memory error:&#160;<codeph class="+ topic/ph pr-d/codeph ">-XX:OnOutOfMemoryError="&lt; cmd args &gt;;&lt; cmd args &gt;"</codeph></p></li><li class="- topic/li "><p class="- topic/p ">Limits the proportion of the VM's time that is spent in GC before an OutOfMemory error is thrown:&#160;<codeph class="+ topic/ph pr-d/codeph ">-XX:+UseGCOverheadLimit</codeph></p></li></ul></p></conbody></concept>